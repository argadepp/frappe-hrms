pipeline {
    agent any

    parameters {
        string(name: 'WORKSPACE', defaultValue: 'development', description:'setting up workspace for terraform')
        string(name: 'Domain', defaultValue: 'example.com',description:'Share domain to create site')
        string(name: 'Company', defaultValue: 'NA',description:'Share company name')
        choice(name: 'InstanceType', choices: ['t2.medium','t2,small'])
    }

    stages {
        stage('Assume Role'){
            steps{
                sh "chmod +x jobs/scripts/assume-role.sh"
                sh(script: 'jobs/scripts/assume-role.sh')
            }
 
        }

            stage('TerraformInit'){
            steps {
                dir('provision/'){
                    sh "terraform init -input=false"
                    sh "echo \$PWD"
                    sh "whoami"
                }
            }
        }

        stage('TerraformFormat'){
            steps {
                dir('provision/'){
                    sh "terraform fmt "
                }
            }
        }

        stage('TerraformPlan'){
            steps {
                dir('provision/'){
                    script {
                        try {
                            sh "terraform workspace new ${params.WORKSPACE}"
                        } catch (err) {
                            sh "terraform workspace select ${params.WORKSPACE}"
                        }
                        sh "terraform plan -var 'instanceType=${InstanceType}' -var 'company=${Company}' -var 'domain=${Domain}' "
                    }
                }
            }
        }
        
        // stage('TerraformApply'){
        //     steps {
        //         script{
        //             def apply = false
        //             try {
        //                 input message: 'Can you please confirm the apply', ok: 'Ready to Apply the Config'
        //                 apply = true
        //             } catch (err) {
        //                 apply = false
        //                  currentBuild.result = 'UNSTABLE'
        //             }
        //             if(apply){
        //                 dir('jenkins-terraform-pipeline/ec2_pipeline/'){
        //                     unstash "terraform-plan"
        //                     sh 'terraform apply terraform.tfplan' 
        //                 }
        //             }
        //         }
        //     }
        // }
    }
}