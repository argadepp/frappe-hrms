pipeline {
    agent any

    parameters {
        string(name: 'WORKSPACE', defaultValue: 'development', description:'setting up workspace for terraform')
    }

    stages {
        stage('Assume Role'){
            aws sts assume-role --region ap-south-1 --role-arn arn:aws:iam::734522607489:role/terraform-infra-create-role --role-session-name deploy-frappe
 
        }

            stage('TerraformInit'){
            steps {
                dir('provision/'){
                    sh "terraform init -input=false"
                    sh "echo \$PWD"
                    sh "whoami"
                }
            }
        }

        stage('TerraformFormat'){
            steps {
                dir('provision/'){
                    sh "terraform fmt -list=true -write=false -diff=true -check=true"
                }
            }
        }

        stage('TerraformValidate'){
            steps {
                dir('provision/'){
                    sh "terraform validate"
                }
            }
        }

        // stage('TerraformPlan'){
        //     steps {
        //         dir('jenkins-terraform-pipeline/ec2_pipeline/'){
        //             script {
        //                 try {
        //                     sh "terraform workspace new ${params.WORKSPACE}"
        //                 } catch (err) {
        //                     sh "terraform workspace select ${params.WORKSPACE}"
        //                 }
        //                 sh "terraform plan -var 'access_key=$ACCESS_KEY' -var 'secret_key=$SECRET_KEY' -var 'instanceType=$instanceType' -var 'region=$region' -var 'capacityType=$capacityType' -var 'product=$product' \
        //                 -var 'environment=$environment' -var 'cluster_version=$cluster_version' -var 'max_size=$max_size' -var 'min_size=$min_size' -var 'desired_size=$desired_size' -var 'max_unavailable=$max_unavailable'\
        //                 -out terraform.tfplan;echo \$? > status"
        //                 stash name: "terraform-plan", includes: "terraform.tfplan"
        //             }
        //         }
        //     }
        // }
        
        // stage('TerraformApply'){
        //     steps {
        //         script{
        //             def apply = false
        //             try {
        //                 input message: 'Can you please confirm the apply', ok: 'Ready to Apply the Config'
        //                 apply = true
        //             } catch (err) {
        //                 apply = false
        //                  currentBuild.result = 'UNSTABLE'
        //             }
        //             if(apply){
        //                 dir('jenkins-terraform-pipeline/ec2_pipeline/'){
        //                     unstash "terraform-plan"
        //                     sh 'terraform apply terraform.tfplan' 
        //                 }
        //             }
        //         }
        //     }
        // }
    }
}